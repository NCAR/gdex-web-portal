# Generated by Django 4.0.8 on 2024-08-13 15:47

import datetime
from django.db import migrations, models
import django.db.models.deletion
import modelcluster.fields
import wagtail.fields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('wagtailcore', '0001_initial'),
        ('wagtaildocs', '0001_initial'),
        ('wagtailimages', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Card',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('title', models.CharField(blank=True, default='', max_length=255, verbose_name='title')),
                ('link', models.URLField(blank=True, help_text='Choose either Related Page, External Link, or Internal link', null=True, verbose_name='External link')),
                ('internal_link', models.CharField(blank=True, default='', help_text='Choose either Related Page, External Link, or Internal link.  Internal link can include a #hash or querystring appended to the URL.', max_length=100, null=True, verbose_name='internal link')),
                ('link_text', models.CharField(blank=True, help_text="Provide the text to use for a related page, external URL, or internal link.  Default='LINK' for external URL or internal link, and the page title for related page", max_length=100, null=True)),
                ('text', wagtail.fields.RichTextField(default='', verbose_name='Body Text')),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DataLicense',
            fields=[
                ('id', models.CharField(help_text='Short name for the data license', max_length=50, primary_key=True, serialize=False)),
                ('url', models.URLField(verbose_name='Link to data license')),
                ('img_url', models.URLField(verbose_name='Link to image for data license')),
                ('name', models.CharField(help_text='Full name of data license', max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='DocumentationPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('header', models.CharField(default='', max_length=100)),
                ('sidebar', models.BooleanField(default=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='GenericPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('intro', wagtail.fields.RichTextField(blank=True, default='')),
                ('sidebar', models.BooleanField(default=True)),
                ('table_of_contents', models.BooleanField(default=False)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='ManPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('body', wagtail.fields.RichTextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='MetricsPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('body', wagtail.fields.RichTextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='NewsAuthor',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(default='rdahelp@ucar.edu', max_length=100)),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
            ],
            options={
                'verbose_name': 'News Author',
                'verbose_name_plural': 'News Authors',
            },
        ),
        migrations.CreateModel(
            name='NewsHome',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('title_description', wagtail.fields.RichTextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='RedirectPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('redirect_url', models.URLField(verbose_name='Redirect URL')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='SocialMedia',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('related_url', models.URLField(help_text='Link to social media page')),
                ('aria_label', models.CharField(help_text='Aria label to apply to the <a href> tag', max_length=50)),
                ('icon_style', models.CharField(default='', help_text="Icon style class to render the social media icon. Specify 'fab' for brands and 'fas' for solid.  See fontawesome version 5 documentation for more info.", max_length=50, verbose_name='Icon style')),
                ('icon_name', models.CharField(default='', help_text='Icon name class from the fontawesome icon set', max_length=50, verbose_name='Icon name')),
            ],
            options={
                'verbose_name': 'Social Media Link',
                'verbose_name_plural': 'Social Media Links',
            },
        ),
        migrations.CreateModel(
            name='StaffPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('body', wagtail.fields.RichTextField(blank=True)),
                ('mission', wagtail.fields.RichTextField(blank=True)),
                ('cts_text', wagtail.fields.RichTextField(blank=True)),
                ('additional_information', wagtail.fields.RichTextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='TaxonomyTerm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('term', models.CharField(blank=True, default='', max_length=255)),
                ('href', models.URLField(blank=True, null=True)),
                ('card', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='taxonomyterm', to='home.card')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='NewsPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('post_date', models.DateField(verbose_name='Post date')),
                ('body', wagtail.fields.RichTextField(blank=True)),
                ('blogger_url', models.URLField(blank=True, help_text='URL of the original post on the NCAR RDA Blogger page', null=True)),
                ('image', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
            ],
            options={
                'ordering': ['-post_date'],
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='NewsAuthorOrderable',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='home.newsauthor')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='news_authors', to='home.newspage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='HomePage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.page')),
                ('tagline', models.CharField(default='', max_length=100)),
                ('welcome', wagtail.fields.RichTextField(default='')),
                ('search_box_title', models.CharField(default='', max_length=255, verbose_name='Search Box Title')),
                ('search_box_placeholder', models.CharField(default='', max_length=255, verbose_name='Search Box Placeholder')),
                ('card_1_title', models.CharField(default='', max_length=255, verbose_name='Title')),
                ('card_1_icon_name', models.CharField(default='', max_length=50, verbose_name='Icon')),
                ('card_1_text', wagtail.fields.RichTextField(default='', verbose_name='Body Text')),
                ('card_1_footer_text', models.CharField(default='', max_length=255, verbose_name='Footer Text')),
                ('card_2_title', models.CharField(default='', max_length=255, verbose_name='title')),
                ('card_2_icon_name', models.CharField(default='', max_length=50, verbose_name='Icon')),
                ('card_2_text', wagtail.fields.RichTextField(default='', verbose_name='Body Text')),
                ('card_2_footer_text', models.CharField(default='', max_length=255, verbose_name='Footer Text')),
                ('card_3_title', models.CharField(default='', max_length=255, verbose_name='Title')),
                ('card_3_icon_name', models.CharField(default='', max_length=50, verbose_name='Icon')),
                ('card_3_text', wagtail.fields.RichTextField(default='', verbose_name='Body Text')),
                ('card_3_footer_text', models.CharField(default='', max_length=255, verbose_name='Footer Text')),
                ('card_1_footer_page', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page')),
                ('card_2_footer_page', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page')),
                ('card_3_footer_page', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page')),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='DocumentLink',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('long_name', models.CharField(default='', max_length=255, verbose_name='Documentation long name')),
                ('description', wagtail.fields.RichTextField(default='', verbose_name='Documentation description')),
                ('doc_url', models.CharField(blank=True, default='', max_length=100, verbose_name='Link to a custom URL')),
                ('link_append', models.CharField(blank=True, help_text="Use this to optionally append a #hash or querystring to the above page's URL.", max_length=100, null=True, verbose_name='Append to URL')),
                ('link_text', models.CharField(blank=True, help_text='Provide the text to use for a custom URL or internal page.  Default=Documentation long name.', max_length=100, null=True)),
                ('doc_page', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page', verbose_name='Link to an internal page')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='links', to='home.documentationpage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DocumentCard',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('long_name', models.CharField(default='', max_length=255, verbose_name='Document long name')),
                ('description', wagtail.fields.RichTextField(blank=True)),
                ('file_name', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtaildocs.document')),
                ('page', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='docs', to='home.documentationpage')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='DecsStaff',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='DECS staff member full name', max_length=100)),
                ('email', models.EmailField(default='rdahelp@ucar.edu', max_length=100)),
                ('image', models.ForeignKey(blank=True, help_text='DECS staff image (optional)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailimages.image')),
            ],
            options={
                'verbose_name': 'DECS Staff Member',
                'verbose_name_plural': 'DECS Staff Members',
            },
        ),
        migrations.AddField(
            model_name='card',
            name='page',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='cards', to='home.genericpage'),
        ),
        migrations.AddField(
            model_name='card',
            name='related_page',
            field=models.ForeignKey(blank=True, help_text='Choose either Related Page, External Link, or Internal link', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='AlertMessage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('message', wagtail.fields.RichTextField(default='')),
                ('name', models.CharField(max_length=100)),
                ('level', models.CharField(choices=[('danger', 'danger'), ('warning', 'warning'), ('info', 'info')], default='info', max_length=7)),
                ('related_url', models.URLField(blank=True, help_text='Optional.  Related page takes precedence over related URL.', null=True)),
                ('start_date', models.DateField(default=datetime.date(2024, 8, 13), verbose_name='Start date')),
                ('end_date', models.DateField(default=datetime.date(2024, 8, 13), verbose_name='End date')),
                ('related_page', models.ForeignKey(blank=True, help_text='Optional.  Related page takes precedence over related URL.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to='wagtailcore.page')),
            ],
            options={
                'verbose_name': 'Alert Message',
                'verbose_name_plural': 'Alert Messages',
            },
        ),
    ]
