"""
Django settings for gdexwebserver project.

Generated by 'django-admin startproject' using Django 3.2.10.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

# NOTE: secret keys and other confidential info should not
#       be stored in this file.  Please put these in local_settings.py
from . import local_settings  # noqa

# Import navigation bar items and Globus settings
from .navigation_bar import *
from .globus_settings import *
from .globus_search_indexes import SEARCH_INDEXES

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
import os

PROJECT_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
BASE_DIR = os.path.dirname(PROJECT_DIR)

DEFAULT_AUTO_FIELD = 'django.db.models.AutoField'


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/


# Application definition

INSTALLED_APPS = [
    'ajax',
    'daas',
    'dashboard',
    'dataaccess',
    'datasets',
    'dataset_citation',
    'dataset_description',
    'dataset_provenance',
    'facbrowse',
    #'globus',
    'globus.apps.GlobusConfig',
    'gsearch',
    'home',
    'oai',
    #'login',
    'lookfordata',
    'metaman',
    'search',
    #'accounts',

    'wagtail.contrib.forms',
    'wagtail.contrib.redirects',
    'wagtail.contrib.search_promotions',
    'wagtail_modeladmin',
    'wagtailmenus',
    'wagtail.embeds',
    'wagtail.sites',
    'wagtail.users',
    'wagtail.snippets',
    'wagtail.documents',
    'wagtail.images',
    'wagtail.search',
    'wagtail.admin',
    'wagtail',

    'modelcluster',
    'taggit',

    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',

    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.orcid',
    'allauth.socialaccount.providers.globus',
    'globus_portal_framework',
    'social_django',
]


MIDDLEWARE = [
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'allauth.account.middleware.AccountMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'wagtail.contrib.redirects.middleware.RedirectMiddleware',
    'globus_portal_framework.middleware.ExpiredTokenMiddleware',
    'globus_portal_framework.middleware.GlobusAuthExceptionMiddleware',
    'social_django.middleware.SocialAuthExceptionMiddleware',
]

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

ROOT_URLCONF = 'gdexwebserver.urls'

MESSAGE_STORAGE = 'django.contrib.messages.storage.cookie.CookieStorage'

# base path for globus_django_portal templates
BASE_TEMPLATES = 'gsearch/dataset-search/globus-portal-framework/'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(PROJECT_DIR, 'templates'),
            '/data/web/jsonld',
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django_settings_export.settings_export',
                'wagtailmenus.context_processors.wagtailmenus',
                'globus_portal_framework.context_processors.globals',
            ],
        },
    },
]

AUTHENTICATION_BACKENDS = [
    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',
    # `allauth` specific authentication methods, such as login by e-mail
    'allauth.account.auth_backends.AuthenticationBackend',
    # Globus django portal framework auth backend
    'globus_portal_framework.auth.GlobusOpenIdConnect',
]



WSGI_APPLICATION = 'gdexwebserver.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
#        'ENGINE': 'django.db.backends.sqlite3',
#        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': local_settings.wagtail2_config_pg['dbname'],
        'HOST': local_settings.wagtail2_config_pg['host'],
        'PORT': local_settings.wagtail2_config_pg['port'],
        'USER': local_settings.wagtail2_config_pg['user'],
        'PASSWORD': local_settings.wagtail2_config_pg['password'],
        'TEST': {
            'NAME': "djangotest",
        },
    }
}

# RDADB configurations

RDADB = {
    'dssdb_config_pg': local_settings.dssdb_config_pg,
    'wagtail2_config_pg': local_settings.wagtail2_config_pg,
    'metadata_config_pg': local_settings.metadata_config_pg,
    'IGrML_config_pg': local_settings.IGrML_config_pg,
    'WGrML_config_pg': local_settings.WGrML_config_pg,
    'search_config_pg': local_settings.search_config_pg,
    'pg_schemas': {
        'dssdb': "dssdb",
        'metadata': "metadata",
        'IGrML': "IGrML",
        'WGrML': "WGrML",
        'search': "search",
        'wagtail': "wagtail",
    },
}

# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATICFILES_FINDERS = [
    'django.contrib.staticfiles.finders.FileSystemFinder',
    'django.contrib.staticfiles.finders.AppDirectoriesFinder',
]

STATICFILES_DIRS = [
    os.path.join(PROJECT_DIR, 'static'),
]

# ManifestStaticFilesStorage is recommended in production, to prevent outdated
# JavaScript / CSS assets being served from cache (e.g. after a Wagtail upgrade).
# See https://docs.djangoproject.com/en/3.2/ref/contrib/staticfiles/#manifeststaticfilesstorage
STATICFILES_STORAGE = 'django.contrib.staticfiles.storage.ManifestStaticFilesStorage'

STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

# Caches
# https://docs.djangoproject.com/en/4.1/topics/cache/
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.filebased.FileBasedCache',
        'LOCATION': '/usr/local/rdaweb/cache',
    }
}


# Wagtail settings

WAGTAIL_SITE_NAME = "gdexwebserver"

# Search
# https://docs.wagtail.io/en/stable/topics/search/backends.html
WAGTAILSEARCH_BACKENDS = {
    'default': {
        'BACKEND': 'wagtail.search.backends.database',
    }
}

# Base URL to use when referring to full URLs within the Wagtail admin backend -
# e.g. in notification emails. Don't include '/admin' or a trailing slash
BASE_URL = 'http://example.com'

# Globus Search configurations

# RDA portal credentials for a Globus Auth Flow (NSF NCAR RDA Client)
SOCIAL_AUTH_GLOBUS_KEY = local_settings.globus_app_client_id
SOCIAL_AUTH_GLOBUS_SECRET = local_settings.globus_app_client_secret

# This is a general Django setting if views need to redirect to login
# https://docs.djangoproject.com/en/3.2/ref/settings/#login-url
LOGIN_URL = '/login/globus'

# Scopes will be requested on each user login
SOCIAL_AUTH_GLOBUS_SCOPE = [
    'urn:globus:auth:scope:search.api.globus.org:search',
]

# Set up logging
LOGLEVEL = os.environ.get('DJANGO_LOGLEVEL', 'info').upper()
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{asctime} {process:d} {thread:d} [{levelname}] {pathname} {funcName}: {lineno} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'level': LOGLEVEL,
            'class': 'logging.StreamHandler',
        },
        'file': {
            'level': LOGLEVEL,
            'class': 'logging.handlers.RotatingFileHandler',
            #'filename': '/data/logs/django/django.log',
            'filename': '/var/log/django.log',
            'maxBytes': 1024*1024*20, # 20MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'root': {
            'handlers': ['console'],
            'level': LOGLEVEL,
        },
        'django': {
            'handlers': ['console'],
            'propagate': True,
            'level': LOGLEVEL,
        },
        'api': {
            'handlers': ['file'],
            'propagate': False,
            'level': LOGLEVEL,
        },
        'globus': {
            'handlers': ['file'],
            'propagate': False,
            'level': LOGLEVEL,
        },
    },
}

# add loggers for installed apps
for app in INSTALLED_APPS:
    if ('wagtail' not in app) and ('django' not in app):
        LOGGING['loggers'].update({
            app: {
                'handlers': ['file'],
                'propagate': False,
                'level': LOGLEVEL,
            }
        })


########################################################################
# General settings
########################################################################

RDA_DATA_PATH = '/glade/campaign/collections/rda/data/'
RDA_REQUEST_PATH = '/glade/campaign/collections/rda/transfer/'
RDA_REQUEST_HOME = '/glade/campaign/collections/rda/transfer/dsrqst'
RDA_CANONICAL_DATA_PATH = '/glade/campaign/collections/rda/data/'
RDA_CANONICAL_REQUEST_PATH = '/glade/campaign/collections/rda/transfer/'

# Data domains and base URLs
OSDF_DOMAIN = 'data-osdf.rda.ucar.edu'
OSDF_DATA_PATH = 'ncar/rda'
OSDF_REQUEST_PATH = 'ncar/rda-transfer'
OSDF_STRATUS_PATH = 'ncar-rda'
OSDF_DATA_DOMAIN = os.path.join(OSDF_DOMAIN, OSDF_DATA_PATH)
OSDF_REQUEST_DOMAIN = os.path.join(OSDF_DOMAIN, OSDF_REQUEST_PATH)
OSDF_STRATUS_DOMAIN = os.path.join(OSDF_DOMAIN, OSDF_STRATUS_PATH)
OSDF_DIRECTOR_URL = 'https://osdf-director.osg-htc.org'
OSDF_NCAR_ORIGIN = 'https://ncar.nationalresearchplatform.org:8443'
OSDF_NCAR_S3_ORIGIN = 'https://ncar-s3-origin.nationalresearchplatform.org:8444'

NCAR_STRATUS_DOMAIN = 'stratus.ucar.edu/rda-data/'

GLOBUS_DATA_BASE_URL = 'https://'+GLOBUS_DATA_DOMAIN
GLOBUS_REQUEST_BASE_URL = 'https://'+GLOBUS_REQUEST_DOMAIN
GLOBUS_STRATUS_BASE_URL = 'https://'+GLOBUS_STRATUS_DOMAIN
OSDF_BASE_URL = 'https://'+OSDF_DATA_DOMAIN
OSDF_REQUEST_URL = 'https://'+OSDF_REQUEST_DOMAIN
OSDF_STRATUS_BASE_URL = 'https://'+OSDF_STRATUS_DOMAIN
NCAR_STRATUS_URL = 'https://'+NCAR_STRATUS_DOMAIN
CGD_DATA_BASE_URL = 'https://'+CGD_HTTPS_DOMAIN

#------------------------------------------------------------------------
# Production base URLs used for web file lists.
# Change to 'GLOBUS' URLs in the event that OSDF service is unavailable
#------------------------------------------------------------------------
# RDA_DATA_BASE_URL = GLOBUS_DATA_BASE_URL
RDA_DATA_BASE_URL = OSDF_BASE_URL

RDA_REQUEST_BASE_URL = GLOBUS_REQUEST_BASE_URL
# RDA_REQUEST_BASE_URL = OSDF_REQUEST_URL

# RDA_STRATUS_BASE_URL = GLOBUS_STRATUS_BASE_URL
RDA_STRATUS_BASE_URL = OSDF_STRATUS_BASE_URL

# Flag to use new dataset ID format 'dnnnnnn'
NEW_DATASET_ID = True

# Flag to use split wfile tables
SPLIT_WFILE = True

########################################################################

SETTINGS_EXPORT = [
    'NAVIGATION_BAR',
    'RDA_DATA_PATH',
    'RDA_REQUEST_PATH',
    'RDA_CANONICAL_DATA_PATH',
    'RDA_CANONICAL_REQUEST_PATH',
    'NCAR_STRATUS_URL',
    'GLOBUS_APP_URL',
    'GLOBUS_FILE_MANAGER_URL',
    'GLOBUS_REDIRECT_URI',
    'GLOBUS_DATA_DOMAIN',
    'GLOBUS_STRATUS_DOMAIN',
    'GLOBUS_REQUEST_DOMAIN',
    'CGD_HTTPS_DOMAIN',
    'RDA_DATA_BASE_URL',
    'RDA_REQUEST_BASE_URL',
    'RDA_STRATUS_BASE_URL',
    'CGD_DATA_BASE_URL',
    'OSDF_BASE_URL',
]

## AllAuth ##
SITE_ID = 1  # Required
SOCIALACCOUNT_PROVIDERS = {
    'orcid': {
        # Base domain of the API. Default value: 'orcid.org', for the production API
        'BASE_DOMAIN':'orcid.org',  # for the member API
        # Member API or Public API? Default: False (for the public API)
        'MEMBER_API': True,  # for the member API
        "APP": {
            "client_id": local_settings.orcid_auth_app['client_id'],
            "secret": local_settings.orcid_auth_app['secret'],
            "key": local_settings.orcid_auth_app['key']
        },
    },
    'globus': {
        'SCOPE': [
            'openid',
            'profile',
            'email',
            'urn:globus:auth:scope:transfer.api.globus.org:all'
        ],
        "APP": {
            "client_id": local_settings.globus_auth_app['client_id'],
            "secret": local_settings.globus_auth_app['secret'],
            "key": local_settings.globus_auth_app['key']
        },
    }
}

#LOGIN_REDIRECT_URL = 'user_profile'                # Where to redirect after login
DEFAULT_FROM_EMAIL = 'noreply@rda.ucar.edu'
ACCOUNT_AUTHENTICATED_LOGIN_REDIRECTS = True        # Redirects go to LOGIN_REDIRECT_URL
#ACCOUNT_EMAIL_CONFIRMATION_ANONYMOUS_REDIRECT_URL = LOGIN_REDIRECT_URL # The URL to redirect to after a successful e-mail confirmation, in case no user is logged in.
ACCOUNT_CONFIRM_EMAIL_ON_GET = True
SOCIALACCOUNT_FORMS = {
    'signup': 'accounts.forms.CustomSignupForm',
    }
ACCOUNT_LOGOUT_REDIRECT_URL = "/accounts/mylogout"
LOGIN_REDIRECT_URL = '/ajax/#!cgi-bin/dashboard'
ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True
SOCIALACCOUNT_ADAPTER = "accounts.adapters.MySocialAccountAdapter"
SOCIALACCOUNT_AUTO_SIGNUP = False
ACCOUNT_ADAPTER = "accounts.adapters.MyAccountAdapter"
ACCOUNT_SIGNUP_EMAIL_ENTER_TWICE = True
ACCOUNT_USER_MODEL_USERNAME_FIELD = "username"
ACCOUNT_EMAIL_REQUIRED = True
ACCOUNT_UNIQUE_EMAIL = True
ACCOUNT_EMAIL_VERIFICATION = 'mandatory'
ACCOUNT_EMAIL_SUBJECT_PREFIX = '[rda.ucar.edu] '
ACCOUNT_USERNAME_REQUIRED = False
ACCOUNT_AUTHENTICATION_METHOD = 'email'
SOCIALACCOUNT_STORE_TOKENS = True
#ACCOUNT_PREVENT_ENUMERATION = False

########################################################################
# Google Maps API settings
########################################################################

GMAP_API_URL = "https://maps.googleapis.com/maps/api/js"
GMAP_API_KEY = local_settings.gmap_api_key

ICOOKIE = local_settings.ICOOKIE
